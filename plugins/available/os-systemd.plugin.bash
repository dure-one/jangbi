## \brief systemd service management configurations. <div style="text-align: right"> group:**prenet** | runtype:**none** | deps: **-** | port: **-**</div><br/>
## \desc 
## This tool helps install, configure, and manage systemd service management for modern Linux system initialization and service control.
# It provides automated installation, configuration management, and systemd optimization capabilities.
# The tool manages systemd services, timers, targets, and system initialization components while
# providing options for minimal systemd deployments and service customization.
## 
## # Jangbi Configs
## ```bash title="/opt/jangbi/.config"
## RUN_OS_SYSTEMD=1 # enable systemd configurations (0=disable, 1=full, 2=journald only)
## SYSTEMD_REMOVERAREPKGS=1 # remove rare packages during systemd setup
## ```
## # Check if running
## ```bash title="bash command"
## $ systemctl status
## ● localhost
##     State: running
## $ systemctl is-enabled systemd-networkd
## enabled
## ```
## # Current Configuration
## Current configuration is stored in `/etc/systemd/`. it is generated by `os-systemd configgen` command on install.
## You can edit it manually and not run install or configapply commands to keep current configurations.
## ```bash title="/etc/systemd/system/networking.service.d/override.conf"
## ```

# shellcheck shell=bash
cite about-plugin
about-plugin 'setup systemd.'
# VARS SYSTEMD_REMOVERAREPKGS

function os-systemd {
    about 'helper function for local os repository'
    group 'prenet'
    runtype 'none'
    deps  ''
    param '1: command'
    param '2: params'
    example '$ os-systemd subcommand'
    local PKGNAME="systemd"
    local DMNNAME="os-systemd"
    BASH_IT_LOG_PREFIX="os-systemd: "
    # OS_SYSTEMD_PORTS="${OS_SYSTEMD_PORTS:-""}"
    if _check_config_reload; then
        _root_only || exit 1
        _distname_check || exit 1
    fi

    if [[ $# -eq 1 ]] && [[ "$1" = "help" ]]; then
        __os-systemd_help "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "install" ]]; then
        __os-systemd_install "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "uninstall" ]]; then
        __os-systemd_uninstall "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "download" ]]; then
        __os-systemd_download "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "disable" ]]; then
        __os-systemd_disable "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "configgen" ]]; then
        __os-systemd_configgen "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "configapply" ]]; then
        __os-systemd_configapply "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "check" ]]; then
        __os-systemd_check "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "run" ]]; then
        __os-systemd_run "$2"
    else
        __os-systemd_help
    fi
}

## \usage os-systemd install|uninstall|download|disable|configgen|configapply|check|run
## $ os-systemd install - install systemd configurations
## $ os-systemd uninstall - uninstall systemd configurations
## $ os-systemd download - download required packages to pkg dir
## $ os-systemd disable - disable systemd plugin
## $ os-systemd configgen - generate systemd configuration files
## $ os-systemd configapply - apply systemd configuration files
## $ os-systemd check - check systemd plugin status
## $ os-systemd run - run systemd tasks
## $ os-systemd help - show this help message
function __os-systemd_help {
    echo -e "Usage: os-systemd [COMMAND]\n"
    echo -e "Helper to systemd service management.\n"
    echo -e "Commands:\n"
    echo "   help      Show this help message"
    echo "   install   Install systemd configurations"
    echo "   uninstall Uninstall systemd configurations"
    echo "   download  Download required packages"
    echo "   disable   Disable systemd"
    echo "   configgen Generate configuration"
    echo "   configapply Apply configuration"
    echo "   check     Check installable"
    echo "   run       Run tasks"
}

function __os-systemd_install { # 0 - disable completely, 1 - full systemd, 2 - only journald
    case "${RUN_OS_SYSTEMD}" in
        1)
            __os-systemd_full_systemd
        ;;
        0)
            __os-systemd_disable_completely
        ;;
        2)
            __os-systemd_only_journald
        ;;
    esac

    log_debug "Reduce network timeout 5Min to 15Sec"
    mkdir -p /etc/systemd/system/networking.service.d/
    echo "[Service]" > /etc/systemd/system/networking.service.d/override.conf
    echo "TimeoutStartSec=15" >> /etc/systemd/system/networking.service.d/override.conf
    systemctl daemon-reload
}

function __os-systemd_uninstall { 
    log_debug "Starting os-systemd Uninstall"
    # recover system
    systemctl disable networking.service
    systemctl enable \
        systemd-journald systemd-journald-dev-log.socket systemd-journald-audit.socket systemd-journald.socket systemd-journal-flush.service \
        systemd-logind.service \
        systemd-networkd systemd-networkd.socket
    systemctl restart \
        systemd-journald systemd-journald-dev-log.socket systemd-journald-audit.socket systemd-journald.socket systemd-journal-flush.service \
        systemd-logind.service \
        systemd-networkd systemd-networkd.socket
    systemctl unmask systemd-networkd systemd-networkd-wait-online.service systemd-journald systemd-logind.service wpa_supplicant.service
    systemctl unmask systemd-journald systemd-journald-dev-log.socket systemd-journald-audit.socket systemd-journald.socket
    
    apt remove -yq isc-dhcp-client ifupdown
    export DEBIAN_FRONTEND=noninteractive
    [[ $(find /etc/apt/sources.list.d|grep -c "extrepo_debian_official") -lt 1 ]] && extrepo enable debian_official
    [[ $(stat /var/lib/apt/lists -c "%X") -lt $(date -d "1 day ago" +%s) ]] && apt update -qy
    apt install -qy rsyslog netplan.io iproute2 wpasupplicant macchanger
}

function __os-systemd_download {
    log_debug "Downloading ${DMNNAME}..."
    case "${RUN_OS_SYSTEMD}" in
        1)
            _download_apt_pkgs "systemd rsyslog netplan.io iproute2 wpasupplicant macchanger"
            ;;
        2)
            _download_apt_pkgs "systemd isc-dhcp-client ifupdown iproute2 wpasupplicant macchanger"
            ;;
        0)
            _download_apt_pkgs "systemd isc-dhcp-client ifupdown iproute2 wpasupplicant macchanger"
            ;;
    esac
    return 0
}

function __os-systemd_disable {
    log_debug "Disabling ${DMNNAME}..."
    # Same as uninstall for systemd
    __os-systemd_uninstall
    return 0
}

function __os-systemd_configgen {
    log_debug "Generating config for ${DMNNAME}..."
    # No separate config generation needed for systemd
    return 0
}

function __os-systemd_configapply {
    log_debug "Applying config ${DMNNAME}..."
    # No separate config apply needed for systemd
    return 0
}

function __os-systemd_check { # running_status: 0 running, 1 installed, running_status 5 can install, running_status 10 can't install, 20 skip
    running_status=0
    log_debug "Checking ${DMNNAME}..."

    # check package file exists
    
    # check global variable
    [[ -z ${RUN_OS_SYSTEMD} ]] && \
        log_error "RUN_OS_SYSTEMD variable is not set." && [[ $running_status -lt 10 ]] && running_status=10
    
    # check disabled systemd components installed
    # 0 - disable completely, 1 - full systemd, 2 - only journald
    case "${RUN_OS_SYSTEMD}" in
        1)
            # 1 - full systemd
            [[ $(dpkg -l|awk '{print $2}'|grep -c "systemd-networkd") -lt 1 ]] && \
                log_info "systemd-networkd is not installed." && [[ $running_status -lt 5 ]] && running_status=5
            [[ $(dpkg -l|awk '{print $2}'|grep -c "systemd-journald") -lt 1 ]] && \
                log_info "systemd-journald is not installed." && [[ $running_status -lt 5 ]] && running_status=5
            
            # check if disable completely. if systemd-journald is not running, force run install
            [[ $(systemctl status systemd-journald 2>/dev/null|awk '{ print $2 }'|grep -c inactive) -gt 0 ]] && \
                log_info "systemd-journald is not running." && running_status=5
            ;; 
        2)
            # 2 - only journald
            [[ $(dpkg -l|awk '{print $2}'|grep -c "isc-dhcp-client") -lt 1 ]] && \
                log_info "isc-dhcp-client is not installed." && [[ $running_status -lt 5 ]] && running_status=5
            [[ $(dpkg -l|awk '{print $2}'|grep -c "systemd-journald") -lt 1 ]] && \
                log_info "systemd-journald is not installed." && [[ $running_status -lt 5 ]] && running_status=5
            
            # check if not full systemd. if systemd-networkd is running, force run install
            [[ $(systemctl status systemd-networkd 2>/dev/null|awk '{ print $2 }'|grep -c inactive) -lt 1 ]] && \
                log_info "systemd-networkd is running." && running_status=5
            
            # check if disable completely. if systemd-journald is not running, force run install
            [[ $(systemctl status systemd-journald 2>/dev/null|awk '{ print $2 }'|grep -c inactive) -gt 0 ]] && \
                log_info "systemd-journald is not running." && running_status=5
            ;;
        0)
            # 0 - disable completely
            [[ $(dpkg -l|awk '{print $2}'|grep -c "isc-dhcp-client") -lt 1 ]] && \
                log_info "isc-dhcp-client is not installed." && [[ $running_status -lt 5 ]] && running_status=5
            
            # check if not full systemd. if systemd-networkd is running, force run install
            [[ $(systemctl status systemd-networkd 2>/dev/null|awk '{ print $2 }'|grep -c inactive) -lt 1 ]] && \
                log_info "systemd-networkd is running." && running_status=5

            # check if not only journald. if systemd-networkd is running, force run install
            [[ $(systemctl status systemd-journald 2>/dev/null|awk '{ print $2 }'|grep -c inactive) -lt 1 ]] && \
                log_info "systemd-journald is running." && running_status=5
            ;;
    esac

    return 0
}

function __os-systemd_run {
    systemctl restart systemd-udevd
    systemctl status systemd-udevd && return 0 || \
        log_error "os-systemd failed to run." && return 1
}

complete -F _blank os-systemd

function __os-systemd_disable_completely { # 0 - disable completely(ifupdown), 1 - full systemd(netplan), 2 - only journald(ifupdown)
    log_debug "Starting os-systemd disable completely(RUN_OS_SYSTEMD=${RUN_OS_SYSTEMD})"
    if [[ ${SYSTEMD_REMOVERAREPKGS} -gt 0 ]]; then
        apt purge -yq alsa-utils v4l-utils v4l2loopback-dkms v4l2loopback-utils
        apt purge -yq modemmanager network-manager ntpsec polkitd wpasupplicant xsane cups avahi-daemon avahi-autoipd
    fi
    # disable systemd services
    apt purge -yq systemd-timesyncd systemd-resolved rsyslog
    systemctl stop \
        systemd-journald systemd-journald-dev-log.socket systemd-journald-audit.socket systemd-journald.socket systemd-journal-flush.service \
        systemd-logind.service \
        systemd-networkd systemd-networkd.socket
    systemctl disable \
        systemd-journald systemd-journald-dev-log.socket systemd-journald-audit.socket systemd-journald.socket systemd-journal-flush.service \
        systemd-logind.service \
        systemd-networkd systemd-networkd.socket
    systemctl mask systemd-networkd systemd-networkd-wait-online.service systemd-journald systemd-logind.service wpa_supplicant.service
    systemctl mask systemd-journald systemd-journald-dev-log.socket systemd-journald-audit.socket systemd-journald.socket

    export DEBIAN_FRONTEND=noninteractive
    [[ $(find /etc/apt/sources.list.d|grep -c "extrepo_debian_official") -lt 1 ]] && extrepo enable debian_official
    [[ $(stat /var/lib/apt/lists -c "%X") -lt $(date -d "1 day ago" +%s) ]] && apt update -qy
    apt install -qy isc-dhcp-client ifupdown iproute2 wpasupplicant macchanger

    # disable journald storage
    sed -i 's/#Storage=auto/Storage=none # JB/' /etc/systemd/journald.conf
    sed -i 's/Storage=.*/Storage=none # JB/' /etc/systemd/journald.conf
    sed -i 's/#MaxLevelStore=debug/MaxLevelStore=warning # JB/' /etc/systemd/journald.conf
    sed -i 's/MaxLevelStore=.*/MaxLevelStore=warning # JB/' /etc/systemd/journald.conf
    sed -i 's/#MaxLevelSyslog=debug/MaxLevelSyslog=warning # JB/' /etc/systemd/journald.conf
    sed -i 's/MaxLevelSyslog=.*/MaxLevelSyslog=warning # JB/' /etc/systemd/journald.conf
    sed -i 's/#MaxLevelKMsg=notice/MaxLevelKMsg=warning # JB/' /etc/systemd/journald.conf
    sed -i 's/MaxLevelKMsg=.*/MaxLevelKMsg=warning # JB/' /etc/systemd/journald.conf
    sed -i 's/#MaxLevelConsole=info/MaxLevelConsole=warning # JB/' /etc/systemd/journald.conf
    sed -i 's/MaxLevelConsole=.*/MaxLevelConsole=warning # JB/' /etc/systemd/journald.conf
    sed -i 's/#MaxLevelWall=emerg/MaxLevelWall=crit # JB/' /etc/systemd/journald.conf
    sed -i 's/MaxLevelWall=.*/MaxLevelWall=crit # JB/' /etc/systemd/journald.conf

    systemctl enable networking.service
}

function __os-systemd_only_journald { # 0 - disable completely, 1 - full systemd, 2 - only journald
    log_debug "Starting os-systemd only journald(RUN_OS_SYSTEMD=${RUN_OS_SYSTEMD})"
    if [[ ${SYSTEMD_REMOVERAREPKGS} -gt 0 ]]; then
        apt purge -yq alsa-utilsv v4l-utils v4l2loopback-dkms v4l2loopback-utils
        apt purge -yq modemmanager network-manager ntpsec polkitd wpasupplicant xsane cups avahi-daemon avahi-autoipd
    fi
    # disable systemd services
    apt purge -yq systemd-timesyncd systemd-resolved
    systemctl stop \
        systemd-logind.service \
        systemd-networkd systemd-networkd.socket
    systemctl disable \
        systemd-logind.service \
        systemd-networkd systemd-networkd.socket
    systemctl mask systemd-networkd systemd-networkd-wait-online.service systemd-journald systemd-logind.service wpa_supplicant.service
    systemctl mask systemd-journald systemd-journald-dev-log.socket systemd-journald-audit.socket systemd-journald.socket
    
    export DEBIAN_FRONTEND=noninteractive
    [[ $(find /etc/apt/sources.list.d|grep -c "extrepo_debian_official") -lt 1 ]] && extrepo enable debian_official
    [[ $(stat /var/lib/apt/lists -c "%X") -lt $(date -d "1 day ago" +%s) ]] && apt update -qy
    apt install -qy isc-dhcp-client ifupdown iproute2 wpasupplicant macchanger
    systemctl enable networking.service
}

function __os-systemd_full_systemd { # 0 - disable completely, 1 - full systemd, 2 - only journald
    log_debug "Starting os-systemd full systemd(RUN_OS_SYSTEMD=${RUN_OS_SYSTEMD})"
    if [[ ${SYSTEMD_REMOVERAREPKGS} -gt 0 ]]; then
        apt purge -yq v4l-utils v4l2loopback-dkms v4l2loopback-utils
        apt purge -yq ntpsec wpasupplicant xsane cups avahi-daemon avahi-autoipd
    fi
    apt purge -yq systemd-timesyncd systemd-resolved
    __os-systemd_uninstall
}