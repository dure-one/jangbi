## \brief darkstat install configurations. <div style="text-align: right"> group:**postnet** | runtype:**minmon** | deps: **-** | port: **LO:19283**</div><br/>
## \desc 
## [Darkstat](https://unix4lyfe.org/darkstat/){:target="_blank"} is saving network traffic statistics and serving them over HTTP.
# We will take the contact ip list from darkstat and devide if contacted address
# is on cdn or not. and we could block them by if cdn or its company names from reverse ips.
## 
## ![darkstat main](../imgs/darkstat_1.png "darkstat main")
## # Jangbi Configs
## ```bash title="/opt/jangbi/.config"
## RUN_NET_DARKSTAT=1 # enable darkstat
## DARKSTAT_PORTS="LO:19283,LAN:19283" # ports to listen, LO - localhost, LAN - LAN interface , 19283 - port
## ```
## # Check if running
## ```bash title="bash command"
## $ ss -nltup|grep darkstat
## tcp   LISTEN 0      128        127.0.0.1:19283      0.0.0.0:*    users:(("darkstat",pid=24887,fd=3))
## $ pidof darkstat
## 24887
## ```
## # Current Configuration
## Current configuration is stored in `/etc/darkstat/`. it is generated by `net-darkstat configgen` command on install.
## You can edit it manually and not run install or configapply commands to keep current configurations.
## ```bash title="/etc/darkstat/init.conf"
## --8<-- "./configs/darkstat/init.conf.sample"
## ```

# shellcheck shell=bash
cite about-plugin
about-plugin 'darkstat install configurations.'

function net-darkstat {
    about 'darkstat install configurations'
    group 'postnet'
    runtype 'minmon'
    deps  ''
    param '1: command'
    param '2: params'
    example '$ net-darkstat subcommand'
    local PKGNAME="darkstat"
    local DMNNAME="net-darkstat"
    BASH_IT_LOG_PREFIX="net-darkstat: "
    DARKSTAT_PORTS="${DARKSTAT_PORTS:-"LO:19283"}"
    if _check_config_reload; then
        _root_only || exit 1
        _distname_check || exit 1
    fi

    if [[ $# -eq 1 ]] && [[ "$1" = "install" ]]; then
        __net-darkstat_install "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "uninstall" ]]; then
        __net-darkstat_uninstall "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "download" ]]; then
        __net-darkstat_download "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "disable" ]]; then
        __net-darkstat_disable "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "configgen" ]]; then
        __net-darkstat_configgen "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "configapply" ]]; then
        __net-darkstat_configapply "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "check" ]]; then
        __net-darkstat_check "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "run" ]]; then
        __net-darkstat_run "$2"
    else
        __net-darkstat_help
    fi
}

## \usage net-darkstat install|uninstall|download|disable|configgen|configapply|check|run
## $ net-darkstat install - install darkstat
## $ net-darkstat uninstall - uninstall darkstat
## $ net-darkstat download - download darkstat package files to pkg dir
## $ net-darkstat disable - disable darkstat plugin
## $ net-darkstat configgen - generate darkstat configuration files
## $ net-darkstat configapply - apply darkstat configuration files
## $ net-darkstat check - check darkstat plugin status
## $ net-darkstat run - run darkstat service
## $ net-darkstat help - show this help message
function __net-darkstat_help {
    echo -e "Usage: net-darkstat [COMMAND]\n"
    echo -e "Helper to darkstat install configurations.\n"
    echo -e "Commands:\n"
    echo "   help        Show this help message"
    echo "   install     Install darkstat"
    echo "   uninstall   Uninstall darkstat"
    echo "   download    Download pkg files to pkg dir"
    echo "   disable     Disable plugin"
    echo "   configgen   Configs Generator"
    echo "   configapply Apply Configs"
    echo "   check       Check vars available"
    echo "   run         Run tasks"
}

function __net-darkstat_install {
    INTERNET_AVAIL=0
    log_debug "Installing ${DMNNAME}..."
    export DEBIAN_FRONTEND=noninteractive
    # darkstat installation
    if [[ ${INTERNET_AVAIL} -gt 0 ]]; then
        [[ $(find /etc/apt/sources.list.d|grep -c "extrepo_debian_official") -lt 1 ]] && extrepo enable debian_official
        [[ $(stat /var/lib/apt/lists -c "%X") -lt $(date -d "1 day ago" +%s) ]] && apt update -qy
        apt install -qy darkstat || log_error "${DMNNAME} online install failed."
    else
        local filepat="./pkgs/darkstat*.deb"
        local pkglist="./pkgs/darkstat.pkgs"
        [[ $(find ${filepat}|wc -l) -lt 1 ]] && log_error "${DMNNAME} pkg file not found."
        pkgslist_down=()
        while read -r pkg; do
            [[ $pkg ]] && pkgslist_down+=("./pkgs/${pkg}*.deb")
        done < ${pkglist}
        # shellcheck disable=SC2068
        apt install -qy ${pkgslist_down[@]} || log_error "${DMNNAME} offline install failed."
    fi

    # html-table-csv-converter installation
    local filepat="./pkgs/html-table-csv-converter-*-linux-musl.tar.gz"
    local tmpdir="/tmp/html-table-csv-converter"
    rm -rf ${tmpdir} 1>/dev/null 2>&1
    mkdir -p ${tmpdir} 1>/dev/null 2>&1

    [[ $(find ${filepat}|wc -l) -lt 1 ]] && __net-darkstat_download 
    tar -zxvf ${filepat} -C ${tmpdir} --strip-components=1 1>/dev/null 2>&1
    if [[ ! -f /tmp/html-table-csv-converter/html-table-csv-converter ]]; then
        log_error "html-table-csv-converter binary not found in package."
        return 1
    fi
    cp ${tmpdir}/html-table-csv-converter /usr/sbin/html-table-csv-converter
    chmod 755 /sbin/html-table-csv-converter
    rm -rf ${tmpdir} 1>/dev/null 2>&1

    # cdn-lookup installation
    local filepat="./pkgs/cdn-lookup-*-linux-musl.tar.gz"
    local tmpdir="/tmp/cdn-lookup"
    rm -rf ${tmpdir} 1>/dev/null 2>&1
    mkdir -p ${tmpdir} 1>/dev/null 2>&1

    [[ $(find ${filepat}|wc -l) -lt 1 ]] && __net-darkstat_download
    tar -zxvf ${filepat} -C ${tmpdir} --strip-components=1 1>/dev/null 2>&1
    if [[ ! -f /tmp/cdn-lookup/cdn-lookup ]]; then
        log_error "cdn-lookup binary not found in package."
        return 1
    fi
    cp ${tmpdir}/cdn-lookup /usr/sbin/cdn-lookup
    chmod 755 /sbin/cdn-lookup

    # generate config
    if ! __net-darkstat_configgen; then # if gen config is different do apply
        __net-darkstat_configapply
        rm -rf /tmp/darkstat
    fi

    # add darkstat user
    log_debug "Creating darkstat user..."
    userdel darkstat 1>/dev/null 2>&1
    useradd -s /bin/false --no-create-home darkstat 1>/dev/null 2>&1
    rm -rf /var/log/darkstat 1>/dev/null 2>&1
    mkdir -p /var/log/darkstat
    chown darkstat:darkstat /var/log/darkstat
    chmod 755 /var/log/darkstat
}

function __net-darkstat_uninstall { 
    log_debug "Uninstalling ${DMNNAME}..."
    pidof darkstat | xargs kill -9 2>/dev/null
    apt purge -qy darkstat
}

function __net-darkstat_download {
    log_debug "Downloading ${DMNNAME}..."
    _download_apt_pkgs darkstat || log_error "${DMNNAME} download failed."
    _download_github_pkgs nikescar/html-table-csv-converter html-table-csv-converter-*-linux-musl.tar.gz || log_error "${DMNNAME} download failed."
    _download_github_pkgs nikescar/cdn-lookup cdn-lookup-*-linux-musl.tar.gz || log_error "${DMNNAME} download failed."
    return 0
}

function __net-darkstat_disable {
    log_debug "Disabling ${DMNNAME}..."
    pidof darkstat | xargs kill -9 2>/dev/null
    return 0
}

function __net-darkstat_configgen {
    log_debug "Generating config for ${DMNNAME}..."
    [[ ${#JB_WANINF} -lt 1 ]] && log_error "JB_WANINF is not set" && exit 1

    rm -rf "/tmp/${PKGNAME}" 1>/dev/null 2>&1
    mkdir -p "/tmp/${PKGNAME}" "/etc/${PKGNAME}" 1>/dev/null 2>&1
    cp ./configs/${PKGNAME}/* /tmp/${PKGNAME}/
    # instant edit
    sed -i "s|START_DARKSTAT=.*|START_DARKSTAT=yes|g" /tmp/darkstat/init.conf
    local ds_inf ds_infnet ds_port ds_bindip=() ipnet ipmask ipip ipsargs
    ds_inf=$(_get_inf_of_infmark "WAN" || return 1)
    ipnet=$(ip -4 -o addr show dev "${ds_inf}" | awk '{print $4}')
    ipmask=$(ipcalc-ng ${ipnet}|grep Netmask|awk '{ print $2 }')
    ipip=$(ipcalc-ng ${ipnet}|grep Address:|awk '{ print $2 }')
    ds_infnet="${ipip}/${ipmask}"
    IFS=',' read -ra rules_array <<< "${DARKSTAT_PORTS}"
    for rule in "${rules_array[@]}"; do 
        rule=$(echo "$rule" | xargs) # trim whitespace
        if [[ $rule =~ ^[A-Z]+:[0-9]+$ ]]; then
            local inf="${rule%%:*}" # get interface name
            local port="${rule##*:}" # get port number
            if [[ -z ${inf} || -z ${port} ]]; then
                log_error "Invalid rule format: ${rule}. Expected format: INTERFACE:PORT"
                return 1
            fi
            [[ -z ${ds_port} ]] && ds_port=${port}
            local ip=$(_get_ip_of_infmark "${inf}")
            if ! _is_valid_ipv4 "${ip}"; then
                log_error "IP address for interface ${inf} is not set."
                return 1
            fi
            ds_bindip=("${ip}")
        else
            log_error "Invalid rule format: ${rule}. Expected format: INTERFACE:PORT"
            return 1
        fi
    done
    ipsargs=$(printf -- '-b %s ' "${ds_bindip[@]}")
    ipsargs=${ipsargs% } 
    sed -i "s|__DARKSTAT_INF__|${ds_inf}|g" /tmp/darkstat/init.conf
    sed -i "s|__DARKSTAT_INFNET__|${ds_infnet}|g" /tmp/darkstat/init.conf
    sed -i "s|__DARKSTAT_PORT__|${ds_port}|g" /tmp/darkstat/init.conf
    sed -i "s|__DARKSTAT_BINDIP__|${ipsargs}|g" /tmp/darkstat/init.conf

    # diff check
    diff -Naur /etc/${PKGNAME} /tmp/${PKGNAME} > /tmp/${PKGNAME}.diff
    [[ $(stat -c %s /tmp/${PKGNAME}.diff) = 0 ]] && return 0 || return 1
}

function __net-darkstat_configapply {
    [[ ! -f /tmp/${PKGNAME}.diff ]] && log_error "/tmp/${PKGNAME}.diff file doesnt exist. please run configgen."
    log_debug "Applying config ${DMNNAME}..."
    local dtnow=$(date +%Y%m%d_%H%M%S)
    [[ -d "/etc/${PKGNAME}" ]] && cp -rf "/etc/${PKGNAME}" "/etc/.${PKGNAME}.${dtnow}"
    pushd /etc/${PKGNAME} 1>/dev/null 2>&1
    patch -i /tmp/${PKGNAME}.diff
    popd 1>/dev/null 2>&1
    rm /tmp/${PKGNAME}.diff
    return 0
}

function __net-darkstat_check { # running_status: 0 running, 1 installed, running_status 5 can install, running_status 10 can't install, 20 skip
    running_status=0
    log_debug "Checking ${DMNNAME}..."

    # check package file exists
    [[ $(find ./pkgs/darkstat*.pkgs|wc -l) -lt 1 ]] && \
        log_info "${PKGNAME} package file does not exist." && [[ $running_status -lt 15 ]] && running_status=15
    # check global variable
    [[ -z ${RUN_NET_DARKSTAT} ]] && \
        log_error "RUN_NET_DARKSTAT variable is not set." && [[ $running_status -lt 10 ]] && running_status=10
    [[ ${RUN_NET_DARKSTAT} != 1 ]] && \
        log_error "RUN_NET_DARKSTAT is not enabled." && __net-darkstat_disable && [[ $running_status -lt 20 ]] && running_status=20
    # check package installed
    [[ $(dpkg -l|awk '{print $2}'|grep -c "darkstat") -lt 1 ]] && \
        log_info "darkstat is not installed." && [[ $running_status -lt 5 ]] && running_status=5
    # check if running
    pidof darkstat && \
        log_info "darkstat is running." && [[ $running_status -lt 1 ]] && running_status=1

    return 0
}

function __net-darkstat_run {
    log_debug "Running ${DMNNAME}..."
    _allow_ports_byplugin ${DMNNAME} ${DARKSTAT_PORTS}
    
    pidof darkstat|xargs kill &>/dev/null
    
    # preserve darkstat_day.log
    [[ -f /var/log/darkstat/darkstat_day.log ]] && \
        cat "/var/log/darkstat/darkstat_day.log" >> "/var/log/darkstat/darkstat_day_preserved.log"

    # shellcheck disable=SC1091
    source /etc/darkstat/init.conf && \
        darkstat $DS_STATIC_VARS $INTERFACE $PORT $BINDIP $LOCAL 1>>/var/log/darkstat/run.log 2>&1 &
    pidof darkstat && return 0 || \
        log_error "darkstat failed to run." && return 0
}

complete -F _blank net-darkstat
