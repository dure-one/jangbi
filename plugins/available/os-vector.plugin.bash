## \brief vector log management configurations. <div style="text-align: right"> group:**postnet** | runtype:**minmon** | deps: **-** | port: **-**</div><br/>
## \desc 
## [Vector](https://vector.dev/){:target="_blank"} is a high-performance log collection, transformation, and routing system.
# In Jangbi's security context, it will collect contacted IP addresses by application
# with sysdig and put them in /var/log/vector folder. so that the user could block
# IPs whether it is on CDN or not.
## 
## # Jangbi Configs
## ```bash title="/opt/jangbi/.config"
## RUN_OS_VECTOR=1 # enable vector log management
## ```
## # Check if running
## ```bash title="bash command"
## $ ps aux|grep vector
## root      12345  0.0  0.1  12345  1234 ?        S    12:34   0:00 vector --config /etc/vector/vector.toml
## $ ls -la /var/log/vector/
## -rw-r--r-- 1 vector vector contacted_ips.log
## ```
## # Current Configuration
## Current configuration is stored in `/etc/vector/`. it is generated by `os-vector configgen` command on install.
## You can edit it manually and not run install or configapply commands to keep current configurations.
## ```bash title="/etc/vector/vector.toml"
## --8<-- "./configs/vector/vector.toml"
## ```

# shellcheck shell=bash
cite about-plugin
about-plugin 'vector install configurations.'

function os-vector {
    about 'vector install configurations'
    group 'postnet'
    runtype 'minmon'
    deps  ''
    param '1: command'
    param '2: params'
    example '$ os-vector subcommand'
    local PKGNAME="vector"
    local DMNNAME="os-vector"
    BASH_IT_LOG_PREFIX="os-vector: "
    # VECTOR_PORTS="${VECTOR_PORTS:-""}"
    if _check_config_reload; then
        _root_only || exit 1
        _distname_check || exit 1
    fi

    if [[ $# -eq 1 ]] && [[ "$1" = "help" ]]; then
        __os-vector_help "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "install" ]]; then
        __os-vector_install "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "uninstall" ]]; then
        __os-vector_uninstall "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "download" ]]; then
        __os-vector_download "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "disable" ]]; then
        __os-vector_disable "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "configgen" ]]; then
        __os-vector_configgen "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "configapply" ]]; then
        __os-vector_configapply "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "check" ]]; then
        __os-vector_check "$2"
    elif [[ $# -eq 1 ]] && [[ "$1" = "run" ]]; then
        __os-vector_run "$2"
    else
        __os-vector_help
    fi
}

## \usage os-vector help|install|uninstall|download|disable|configgen|configapply|check|run
## $ os-vector install - install Vector log management
## $ os-vector uninstall - uninstall Vector
## $ os-vector download - download Vector package files to pkg dir
## $ os-vector disable - disable Vector plugin
## $ os-vector configgen - generate Vector configuration files
## $ os-vector configapply - apply Vector configuration files
## $ os-vector check - check Vector plugin status
## $ os-vector run - run Vector service
## $ os-vector help - show this help message
function __os-vector_help {
    echo -e "Usage: os-vector [COMMAND]\n"
    echo -e "Helper to vector install configurations.\n"
    echo -e "Commands:\n"
    echo "   help      Show this help message"
    echo "   install   Install vector"
    echo "   uninstall Uninstall installed vector"
    echo "   download  Download pkg files to pkg dir"
    echo "   disable   Disable vector"
    echo "   configgen Configs Generator"
    echo "   configapply Apply Configs"
    echo "   check     Check vars available"
    echo "   run       Run tasks"
}

function __os-vector_install {
    log_debug "Installing ${DMNNAME}..."

    local filepat="./pkgs/vector_*.deb"
    [[ $(find ${filepat}|wc -l) -lt 1 ]] && __net-vector_download
    apt install -yq ./pkgs/vector_*.deb ./pkgs/sysdig-*.deb
    mkdir -p /var/log/vector 1>/dev/null 2>&1

    if ! __os-vector_configgen; then # if gen config is different do apply
        __os-vector_configapply
        rm -rf /tmp/${PKGNAME}
    fi
   
}

function __os-vector_configgen { # config generator and diff
    log_debug "Generating config for ${DMNNAME}..."
    rm -rf /tmp/${PKGNAME} 1>/dev/null 2>&1
    mkdir -p /tmp/${PKGNAME} /etc/${PKGNAME} 1>/dev/null 2>&1
    cp -rf /etc/${PKGNAME}/* /tmp/${PKGNAME}/
    cp -rf ./configs/${PKGNAME}/* /tmp/${PKGNAME}/
    
    # diff check
    diff -Naur /etc/${PKGNAME} /tmp/${PKGNAME} > /tmp/${PKGNAME}.diff
    [[ $(stat -c %s /tmp/${PKGNAME}.diff) = 0 ]] && return 0 || return 1
}

function __os-vector_configapply {
    [[ ! -f /tmp/${PKGNAME}.diff ]] && log_error "/tmp/${PKGNAME}.diff file doesnt exist. please run configgen."
    log_debug "Applying config ${DMNNAME}..."
    local dtnow=$(date +%Y%m%d_%H%M%S)
    [[ -d "/etc/${PKGNAME}" ]] && cp -rf "/etc/${PKGNAME}" "/etc/.${PKGNAME}.${dtnow}"
    pushd /etc/${PKGNAME} 1>/dev/null 2>&1
    patch -i /tmp/${PKGNAME}.diff
    popd 1>/dev/null 2>&1
    rm /tmp/${PKGNAME}.diff
    return 0
}

function __os-vector_download {
    log_debug "Downloading ${DMNNAME}..." 
    # _download_github_pkgs vectordotdev/vector vector_*.deb  || log_error "${DMNNAME} download failed."
    wget https://github.com/vectordotdev/vector/releases/download/v0.49.0/vector_0.49.0-1_amd64.deb -O ./pkgs/vector_0.49.0-1_amd64.deb 2>&1 1>/dev/null &
    _download_github_pkgs draios/sysdig sysdig-*.deb || log_error "${DMNNAME} download failed."
    return 0
}

function __os-vector_uninstall { 
    pidof vector | xargs kill -9 2>/dev/null
    apt purge -qy vector sysdig
}

function __os-vector_disable { 
    log_debug "Disabling ${DMNNAME}..."
    pidof vector | xargs kill -9 2>/dev/null
    return 0
}

function __os-vector_check { # running_status: 0 running, 1 installed, running_status 5 can install, running_status 10 can't install, 20 skip
    running_status=0
    log_debug "Checking ${DMNNAME}..."

    # check global variable
    [[ -z ${RUN_OS_VECTOR} ]] && \
        log_error "RUN_OS_VECTOR variable is not set." && [[ $running_status -lt 10 ]] && running_status=10
    [[ ${RUN_OS_VECTOR} != 1 ]] && \
        log_error "RUN_OS_VECTOR is not enabled." && __os-vector_disable && [[ $running_status -lt 20 ]] && running_status=20
    # check package installed
    [[ $(dpkg -l|awk '{print $2}'|grep -c "vector") -lt 1 ]] && \
        log_info "vector is not installed." && [[ $running_status -lt 5 ]] && running_status=5
    # check if running
    [[ $(pidof vector) -gt 0 ]] && \
        log_info "vector is running." && [[ $running_status -lt 1 ]] && running_status=1

    return 0
}

function __os-vector_run {
    log_debug "Running ${DMNNAME}..."
    # [[ ${RUN_NET_IPTABLES} -gt 0 ]] && \
    #     __net-iptables_nat_ext_both_allowedportinf "${VECTOR_PORTS}" || log_debug "failed to set iptables rules for ${VECTOR_PORTS}."
    pidof vector | xargs kill -9 2>/dev/null
    vector -c /etc/vector/vector.toml 1>>/var/log/vector/daemon.log 2>&1 &
    pidof vector && return 0 || return 1
}

complete -F _blank os-vector